
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  000012b6  0000134a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  00800096  00800096  00001380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f76  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115d  00000000  00000000  000047ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c97  00000000  00000000  00005917  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bac  00000000  00000000  000075b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011a5  00000000  00000000  0000815c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002563  00000000  00000000  00009301  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  0000b864  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__vector_1>
       8:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__vector_2>
       c:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_6>
      1c:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_7>
      20:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__vector_8>
      24:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__vector_9>
      28:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__vector_10>
      2c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__vector_11>
      30:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_12>
      34:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_15>
      40:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 31       	cpi	r26, 0x12	; 18
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 05 	call	0xa22	; 0xa22 <main>
      8a:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CALC_Init>:
u8 cop;
u8 flag_error;
/*****************************************************/
void CALC_Init(void)
{
	DIO_Init();
      92:	0e 94 3c 06 	call	0xc78	; 0xc78 <DIO_Init>
	LCD_Init();
      96:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_Init>
	KEYPAD_Init();
      9a:	0e 94 45 03 	call	0x68a	; 0x68a <KEYPAD_Init>
      9e:	08 95       	ret

000000a0 <GET_NUM>:
}



s32 GET_NUM(u8 dig)
{
      a0:	0f 93       	push	r16
      a2:	1f 93       	push	r17
	u8 L_NUM=dig-'0';
      a4:	e0 ed       	ldi	r30, 0xD0	; 208
      a6:	e8 0f       	add	r30, r24
	G_NUM=(G_NUM*10)+L_NUM;
      a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <G_NUM>
      ac:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <G_NUM+0x1>
      b0:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <G_NUM+0x2>
      b4:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <G_NUM+0x3>
      b8:	8c 01       	movw	r16, r24
      ba:	9d 01       	movw	r18, r26
      bc:	00 0f       	add	r16, r16
      be:	11 1f       	adc	r17, r17
      c0:	22 1f       	adc	r18, r18
      c2:	33 1f       	adc	r19, r19
      c4:	b9 01       	movw	r22, r18
      c6:	a8 01       	movw	r20, r16
      c8:	44 0f       	add	r20, r20
      ca:	55 1f       	adc	r21, r21
      cc:	66 1f       	adc	r22, r22
      ce:	77 1f       	adc	r23, r23
      d0:	44 0f       	add	r20, r20
      d2:	55 1f       	adc	r21, r21
      d4:	66 1f       	adc	r22, r22
      d6:	77 1f       	adc	r23, r23
      d8:	d9 01       	movw	r26, r18
      da:	c8 01       	movw	r24, r16
      dc:	84 0f       	add	r24, r20
      de:	95 1f       	adc	r25, r21
      e0:	a6 1f       	adc	r26, r22
      e2:	b7 1f       	adc	r27, r23
      e4:	bc 01       	movw	r22, r24
      e6:	cd 01       	movw	r24, r26
      e8:	6e 0f       	add	r22, r30
      ea:	71 1d       	adc	r23, r1
      ec:	81 1d       	adc	r24, r1
      ee:	91 1d       	adc	r25, r1
      f0:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <G_NUM>
      f4:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <G_NUM+0x1>
      f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <G_NUM+0x2>
      fc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <G_NUM+0x3>
	return G_NUM;
     100:	1f 91       	pop	r17
     102:	0f 91       	pop	r16
     104:	08 95       	ret

00000106 <CALC_Runnable>:
	KEYPAD_Init();

}

void CALC_Runnable(void)
{
     106:	cf 92       	push	r12
     108:	df 92       	push	r13
     10a:	ef 92       	push	r14
     10c:	ff 92       	push	r15
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
	s32 num=0;
	k=KEYPAD_GetKey();
     114:	0e 94 52 03 	call	0x6a4	; 0x6a4 <KEYPAD_GetKey>
     118:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <k>
	if (k!=NO_KEY)
     11c:	84 35       	cpi	r24, 0x54	; 84
     11e:	09 f4       	brne	.+2      	; 0x122 <CALC_Runnable+0x1c>
     120:	ac c2       	rjmp	.+1368   	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
	{
		if (k>='0'&&k<='9')
     122:	80 53       	subi	r24, 0x30	; 48
     124:	8a 30       	cpi	r24, 0x0A	; 10
     126:	98 f4       	brcc	.+38     	; 0x14e <CALC_Runnable+0x48>
		{
			
			if (new_eqn_flag==1)
     128:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <new_eqn_flag>
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	21 f4       	brne	.+8      	; 0x138 <CALC_Runnable+0x32>
			{
				LCD_Clear();
     130:	0e 94 04 05 	call	0xa08	; 0xa08 <LCD_Clear>
				new_eqn_flag=0;
     134:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <new_eqn_flag>
			}
			LCD_WriteChar(k);
     138:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <k>
     13c:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_WriteChar>
			num=GET_NUM(k);
     140:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <k>
     144:	0e 94 50 00 	call	0xa0	; 0xa0 <GET_NUM>
			cop=0;
     148:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <cop>
     14c:	96 c2       	rjmp	.+1324   	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
		else
		{
			
			
			
			num=GET_NUM('0');
     14e:	80 e3       	ldi	r24, 0x30	; 48
     150:	0e 94 50 00 	call	0xa0	; 0xa0 <GET_NUM>
			num/=10;
     154:	2a e0       	ldi	r18, 0x0A	; 10
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	50 e0       	ldi	r21, 0x00	; 0
     15c:	0e 94 20 09 	call	0x1240	; 0x1240 <__divmodsi4>
     160:	69 01       	movw	r12, r18
     162:	7a 01       	movw	r14, r20
			LCD_WriteChar(k);
     164:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <k>
     168:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_WriteChar>
			arr_num[num_ArrIndex]=num;
     16c:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <num_ArrIndex>
     170:	e8 2f       	mov	r30, r24
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	ee 0f       	add	r30, r30
     176:	ff 1f       	adc	r31, r31
     178:	ee 0f       	add	r30, r30
     17a:	ff 1f       	adc	r31, r31
     17c:	e8 56       	subi	r30, 0x68	; 104
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	c0 82       	st	Z, r12
     182:	d1 82       	std	Z+1, r13	; 0x01
     184:	e2 82       	std	Z+2, r14	; 0x02
     186:	f3 82       	std	Z+3, r15	; 0x03
			num_ArrIndex++;
     188:	8f 5f       	subi	r24, 0xFF	; 255
     18a:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <num_ArrIndex>
			G_NUM=0;
     18e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <G_NUM>
     192:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <G_NUM+0x1>
     196:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <G_NUM+0x2>
     19a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <G_NUM+0x3>
			
			
			if (k!='C'&&k!='=')
     19e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <k>
     1a2:	83 34       	cpi	r24, 0x43	; 67
     1a4:	81 f1       	breq	.+96     	; 0x206 <CALC_Runnable+0x100>
     1a6:	8d 33       	cpi	r24, 0x3D	; 61
     1a8:	71 f1       	breq	.+92     	; 0x206 <CALC_Runnable+0x100>
			{
				
				
				if (new_eqn_flag==1)
     1aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <new_eqn_flag>
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	e9 f4       	brne	.+58     	; 0x1ec <CALC_Runnable+0xe6>
				{
					LCD_Clear();
     1b2:	0e 94 04 05 	call	0xa08	; 0xa08 <LCD_Clear>
					arr_num[0]=res;
     1b6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <res>
     1ba:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <res+0x1>
     1be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <res+0x2>
     1c2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <res+0x3>
     1c6:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <arr_num>
     1ca:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <arr_num+0x1>
     1ce:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <arr_num+0x2>
     1d2:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <arr_num+0x3>
					num_ArrIndex=1;
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	20 93 97 00 	sts	0x0097, r18	; 0x800097 <num_ArrIndex>
					LCD_WriteNumber(res);
     1dc:	0e 94 a5 04 	call	0x94a	; 0x94a <LCD_WriteNumber>
					LCD_WriteChar(k);
     1e0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <k>
     1e4:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_WriteChar>
					new_eqn_flag=0;
     1e8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <new_eqn_flag>
				}
				arr_operators[arr_operatorsIndex]=k;
     1ec:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
     1f0:	e8 2f       	mov	r30, r24
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	e7 5f       	subi	r30, 0xF7	; 247
     1f6:	fe 4f       	sbci	r31, 0xFE	; 254
     1f8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <k>
     1fc:	90 83       	st	Z, r25
				arr_operatorsIndex++;
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
     204:	3a c2       	rjmp	.+1140   	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
				
			}
			else if (k=='=')
     206:	8d 33       	cpi	r24, 0x3D	; 61
     208:	09 f0       	breq	.+2      	; 0x20c <CALC_Runnable+0x106>
     20a:	2f c2       	rjmp	.+1118   	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
			{
				
				
				cop=0;
     20c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <cop>

				for (u8 j=0;j<2;j++)
     210:	10 e0       	ldi	r17, 0x00	; 0
     212:	f9 c0       	rjmp	.+498    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
				{
					for (u8 i=0;i<arr_operatorsIndex;i++)
					{
						u8 flag_op_done=0;
						if (j==0&&(arr_operators[i]=='*'))
     214:	11 11       	cpse	r17, r1
     216:	2b c0       	rjmp	.+86     	; 0x26e <CALC_Runnable+0x168>
     218:	8d 2f       	mov	r24, r29
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	fc 01       	movw	r30, r24
     21e:	e7 5f       	subi	r30, 0xF7	; 247
     220:	fe 4f       	sbci	r31, 0xFE	; 254
     222:	20 81       	ld	r18, Z
     224:	2a 32       	cpi	r18, 0x2A	; 42
     226:	19 f5       	brne	.+70     	; 0x26e <CALC_Runnable+0x168>
						{
							arr_num[i]=arr_num[i]*arr_num[i+1];
     228:	9c 01       	movw	r18, r24
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	22 0f       	add	r18, r18
     230:	33 1f       	adc	r19, r19
     232:	a9 01       	movw	r20, r18
     234:	48 56       	subi	r20, 0x68	; 104
     236:	5f 4f       	sbci	r21, 0xFF	; 255
     238:	7a 01       	movw	r14, r20
     23a:	fa 01       	movw	r30, r20
     23c:	20 81       	ld	r18, Z
     23e:	31 81       	ldd	r19, Z+1	; 0x01
     240:	42 81       	ldd	r20, Z+2	; 0x02
     242:	53 81       	ldd	r21, Z+3	; 0x03
     244:	fc 01       	movw	r30, r24
     246:	31 96       	adiw	r30, 0x01	; 1
     248:	ee 0f       	add	r30, r30
     24a:	ff 1f       	adc	r31, r31
     24c:	ee 0f       	add	r30, r30
     24e:	ff 1f       	adc	r31, r31
     250:	e8 56       	subi	r30, 0x68	; 104
     252:	ff 4f       	sbci	r31, 0xFF	; 255
     254:	60 81       	ld	r22, Z
     256:	71 81       	ldd	r23, Z+1	; 0x01
     258:	82 81       	ldd	r24, Z+2	; 0x02
     25a:	93 81       	ldd	r25, Z+3	; 0x03
     25c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsi3>
     260:	f7 01       	movw	r30, r14
     262:	60 83       	st	Z, r22
     264:	71 83       	std	Z+1, r23	; 0x01
     266:	82 83       	std	Z+2, r24	; 0x02
     268:	93 83       	std	Z+3, r25	; 0x03
							
							flag_op_done=1;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	8a c0       	rjmp	.+276    	; 0x382 <CALC_Runnable+0x27c>
						}
						else if (j==0&&arr_operators[i]=='/')
     26e:	11 11       	cpse	r17, r1
     270:	2b c0       	rjmp	.+86     	; 0x2c8 <CALC_Runnable+0x1c2>
     272:	4d 2f       	mov	r20, r29
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	fa 01       	movw	r30, r20
     278:	e7 5f       	subi	r30, 0xF7	; 247
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	20 81       	ld	r18, Z
     27e:	2f 32       	cpi	r18, 0x2F	; 47
     280:	19 f5       	brne	.+70     	; 0x2c8 <CALC_Runnable+0x1c2>
						{
							arr_num[i]=arr_num[i]/arr_num[i+1];
     282:	9a 01       	movw	r18, r20
     284:	22 0f       	add	r18, r18
     286:	33 1f       	adc	r19, r19
     288:	22 0f       	add	r18, r18
     28a:	33 1f       	adc	r19, r19
     28c:	c9 01       	movw	r24, r18
     28e:	88 56       	subi	r24, 0x68	; 104
     290:	9f 4f       	sbci	r25, 0xFF	; 255
     292:	7c 01       	movw	r14, r24
     294:	fc 01       	movw	r30, r24
     296:	60 81       	ld	r22, Z
     298:	71 81       	ldd	r23, Z+1	; 0x01
     29a:	82 81       	ldd	r24, Z+2	; 0x02
     29c:	93 81       	ldd	r25, Z+3	; 0x03
     29e:	fa 01       	movw	r30, r20
     2a0:	31 96       	adiw	r30, 0x01	; 1
     2a2:	ee 0f       	add	r30, r30
     2a4:	ff 1f       	adc	r31, r31
     2a6:	ee 0f       	add	r30, r30
     2a8:	ff 1f       	adc	r31, r31
     2aa:	e8 56       	subi	r30, 0x68	; 104
     2ac:	ff 4f       	sbci	r31, 0xFF	; 255
     2ae:	20 81       	ld	r18, Z
     2b0:	31 81       	ldd	r19, Z+1	; 0x01
     2b2:	42 81       	ldd	r20, Z+2	; 0x02
     2b4:	53 81       	ldd	r21, Z+3	; 0x03
     2b6:	0e 94 20 09 	call	0x1240	; 0x1240 <__divmodsi4>
     2ba:	f7 01       	movw	r30, r14
     2bc:	20 83       	st	Z, r18
     2be:	31 83       	std	Z+1, r19	; 0x01
     2c0:	42 83       	std	Z+2, r20	; 0x02
     2c2:	53 83       	std	Z+3, r21	; 0x03
							flag_op_done=1;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	5d c0       	rjmp	.+186    	; 0x382 <CALC_Runnable+0x27c>
						}
						else if (j==1&&arr_operators[i]=='+')
     2c8:	11 30       	cpi	r17, 0x01	; 1
     2ca:	59 f5       	brne	.+86     	; 0x322 <CALC_Runnable+0x21c>
     2cc:	8d 2f       	mov	r24, r29
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	fc 01       	movw	r30, r24
     2d2:	e7 5f       	subi	r30, 0xF7	; 247
     2d4:	fe 4f       	sbci	r31, 0xFE	; 254
     2d6:	20 81       	ld	r18, Z
     2d8:	2b 32       	cpi	r18, 0x2B	; 43
     2da:	19 f5       	brne	.+70     	; 0x322 <CALC_Runnable+0x21c>
						{
							arr_num[i]=arr_num[i]+arr_num[i+1];
     2dc:	dc 01       	movw	r26, r24
     2de:	aa 0f       	add	r26, r26
     2e0:	bb 1f       	adc	r27, r27
     2e2:	aa 0f       	add	r26, r26
     2e4:	bb 1f       	adc	r27, r27
     2e6:	a8 56       	subi	r26, 0x68	; 104
     2e8:	bf 4f       	sbci	r27, 0xFF	; 255
     2ea:	cd 90       	ld	r12, X+
     2ec:	dd 90       	ld	r13, X+
     2ee:	ed 90       	ld	r14, X+
     2f0:	fc 90       	ld	r15, X
     2f2:	13 97       	sbiw	r26, 0x03	; 3
     2f4:	fc 01       	movw	r30, r24
     2f6:	31 96       	adiw	r30, 0x01	; 1
     2f8:	ee 0f       	add	r30, r30
     2fa:	ff 1f       	adc	r31, r31
     2fc:	ee 0f       	add	r30, r30
     2fe:	ff 1f       	adc	r31, r31
     300:	e8 56       	subi	r30, 0x68	; 104
     302:	ff 4f       	sbci	r31, 0xFF	; 255
     304:	40 81       	ld	r20, Z
     306:	51 81       	ldd	r21, Z+1	; 0x01
     308:	62 81       	ldd	r22, Z+2	; 0x02
     30a:	73 81       	ldd	r23, Z+3	; 0x03
     30c:	4c 0d       	add	r20, r12
     30e:	5d 1d       	adc	r21, r13
     310:	6e 1d       	adc	r22, r14
     312:	7f 1d       	adc	r23, r15
     314:	4d 93       	st	X+, r20
     316:	5d 93       	st	X+, r21
     318:	6d 93       	st	X+, r22
     31a:	7c 93       	st	X, r23
     31c:	13 97       	sbiw	r26, 0x03	; 3
							
							flag_op_done=1;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	30 c0       	rjmp	.+96     	; 0x382 <CALC_Runnable+0x27c>
						}
						else if (j==1&&arr_operators[i]=='-')
     322:	11 30       	cpi	r17, 0x01	; 1
     324:	59 f5       	brne	.+86     	; 0x37c <CALC_Runnable+0x276>
     326:	8d 2f       	mov	r24, r29
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	fc 01       	movw	r30, r24
     32c:	e7 5f       	subi	r30, 0xF7	; 247
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	20 81       	ld	r18, Z
     332:	2d 32       	cpi	r18, 0x2D	; 45
     334:	29 f5       	brne	.+74     	; 0x380 <CALC_Runnable+0x27a>
						{
							arr_num[i]=arr_num[i]-arr_num[i+1];
     336:	dc 01       	movw	r26, r24
     338:	aa 0f       	add	r26, r26
     33a:	bb 1f       	adc	r27, r27
     33c:	aa 0f       	add	r26, r26
     33e:	bb 1f       	adc	r27, r27
     340:	a8 56       	subi	r26, 0x68	; 104
     342:	bf 4f       	sbci	r27, 0xFF	; 255
     344:	4d 91       	ld	r20, X+
     346:	5d 91       	ld	r21, X+
     348:	6d 91       	ld	r22, X+
     34a:	7c 91       	ld	r23, X
     34c:	13 97       	sbiw	r26, 0x03	; 3
     34e:	fc 01       	movw	r30, r24
     350:	31 96       	adiw	r30, 0x01	; 1
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	e8 56       	subi	r30, 0x68	; 104
     35c:	ff 4f       	sbci	r31, 0xFF	; 255
     35e:	c0 80       	ld	r12, Z
     360:	d1 80       	ldd	r13, Z+1	; 0x01
     362:	e2 80       	ldd	r14, Z+2	; 0x02
     364:	f3 80       	ldd	r15, Z+3	; 0x03
     366:	4c 19       	sub	r20, r12
     368:	5d 09       	sbc	r21, r13
     36a:	6e 09       	sbc	r22, r14
     36c:	7f 09       	sbc	r23, r15
     36e:	4d 93       	st	X+, r20
     370:	5d 93       	st	X+, r21
     372:	6d 93       	st	X+, r22
     374:	7c 93       	st	X, r23
     376:	13 97       	sbiw	r26, 0x03	; 3
							flag_op_done=1;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	03 c0       	rjmp	.+6      	; 0x382 <CALC_Runnable+0x27c>

				for (u8 j=0;j<2;j++)
				{
					for (u8 i=0;i<arr_operatorsIndex;i++)
					{
						u8 flag_op_done=0;
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	01 c0       	rjmp	.+2      	; 0x382 <CALC_Runnable+0x27c>
     380:	80 e0       	ldi	r24, 0x00	; 0
						{
							arr_num[i]=arr_num[i]-arr_num[i+1];
							flag_op_done=1;
						}
						
						if (flag_op_done)
     382:	88 23       	and	r24, r24
     384:	b9 f1       	breq	.+110    	; 0x3f4 <CALC_Runnable+0x2ee>
						{
							
							for(u8 z=i+1;z<num_ArrIndex;z++)
     386:	21 e0       	ldi	r18, 0x01	; 1
     388:	2d 0f       	add	r18, r29
     38a:	1a c0       	rjmp	.+52     	; 0x3c0 <CALC_Runnable+0x2ba>
							{
								arr_num[z]=arr_num[z+1];
     38c:	82 2f       	mov	r24, r18
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	fc 01       	movw	r30, r24
     392:	31 96       	adiw	r30, 0x01	; 1
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	e8 56       	subi	r30, 0x68	; 104
     39e:	ff 4f       	sbci	r31, 0xFF	; 255
     3a0:	40 81       	ld	r20, Z
     3a2:	51 81       	ldd	r21, Z+1	; 0x01
     3a4:	62 81       	ldd	r22, Z+2	; 0x02
     3a6:	73 81       	ldd	r23, Z+3	; 0x03
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	fc 01       	movw	r30, r24
     3b2:	e8 56       	subi	r30, 0x68	; 104
     3b4:	ff 4f       	sbci	r31, 0xFF	; 255
     3b6:	40 83       	st	Z, r20
     3b8:	51 83       	std	Z+1, r21	; 0x01
     3ba:	62 83       	std	Z+2, r22	; 0x02
     3bc:	73 83       	std	Z+3, r23	; 0x03
						}
						
						if (flag_op_done)
						{
							
							for(u8 z=i+1;z<num_ArrIndex;z++)
     3be:	2f 5f       	subi	r18, 0xFF	; 255
     3c0:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <num_ArrIndex>
     3c4:	23 17       	cp	r18, r19
     3c6:	10 f3       	brcs	.-60     	; 0x38c <CALC_Runnable+0x286>
     3c8:	2d 2f       	mov	r18, r29
     3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <CALC_Runnable+0x2dc>

								
							}
							for(u8 z=i;z<arr_operatorsIndex;z++)
							{
								arr_operators[z]=arr_operators[z+1];
     3cc:	82 2f       	mov	r24, r18
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	fc 01       	movw	r30, r24
     3d2:	e6 5f       	subi	r30, 0xF6	; 246
     3d4:	fe 4f       	sbci	r31, 0xFE	; 254
     3d6:	40 81       	ld	r20, Z
     3d8:	fc 01       	movw	r30, r24
     3da:	e7 5f       	subi	r30, 0xF7	; 247
     3dc:	fe 4f       	sbci	r31, 0xFE	; 254
     3de:	40 83       	st	Z, r20
							{
								arr_num[z]=arr_num[z+1];

								
							}
							for(u8 z=i;z<arr_operatorsIndex;z++)
     3e0:	2f 5f       	subi	r18, 0xFF	; 255
     3e2:	2c 17       	cp	r18, r28
     3e4:	98 f3       	brcs	.-26     	; 0x3cc <CALC_Runnable+0x2c6>
							{
								arr_operators[z]=arr_operators[z+1];
								
								
							}
							num_ArrIndex--;
     3e6:	31 50       	subi	r19, 0x01	; 1
     3e8:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <num_ArrIndex>
							arr_operatorsIndex--;
     3ec:	c1 50       	subi	r28, 0x01	; 1
     3ee:	c0 93 96 00 	sts	0x0096, r28	; 0x800096 <__data_end>
							i--;
     3f2:	d1 50       	subi	r29, 0x01	; 1
				
				cop=0;

				for (u8 j=0;j<2;j++)
				{
					for (u8 i=0;i<arr_operatorsIndex;i++)
     3f4:	df 5f       	subi	r29, 0xFF	; 255
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <CALC_Runnable+0x2f4>
     3f8:	d0 e0       	ldi	r29, 0x00	; 0
     3fa:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__data_end>
     3fe:	dc 17       	cp	r29, r28
     400:	08 f4       	brcc	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     402:	08 cf       	rjmp	.-496    	; 0x214 <CALC_Runnable+0x10e>
			{
				
				
				cop=0;

				for (u8 j=0;j<2;j++)
     404:	1f 5f       	subi	r17, 0xFF	; 255
     406:	12 30       	cpi	r17, 0x02	; 2
     408:	b8 f3       	brcs	.-18     	; 0x3f8 <CALC_Runnable+0x2f2>
     40a:	d0 e0       	ldi	r29, 0x00	; 0
     40c:	0c c1       	rjmp	.+536    	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
				for (u8 j=0;j<4;j++)
				{
					for (u8 i=0;i<arr_operatorsIndex;i++)
					{
						u8 flag_op_done=0;
						if (j==0&&(arr_operators[i]==arr_presedence[j]))
     40e:	d1 11       	cpse	r29, r1
     410:	30 c0       	rjmp	.+96     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     412:	81 2f       	mov	r24, r17
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	fc 01       	movw	r30, r24
     418:	e7 5f       	subi	r30, 0xF7	; 247
     41a:	fe 4f       	sbci	r31, 0xFE	; 254
     41c:	30 81       	ld	r19, Z
     41e:	ed 2f       	mov	r30, r29
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	e0 5a       	subi	r30, 0xA0	; 160
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	20 81       	ld	r18, Z
     428:	32 13       	cpse	r19, r18
     42a:	23 c0       	rjmp	.+70     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
						{
							arr_num[i]=arr_num[i]*arr_num[i+1];
     42c:	9c 01       	movw	r18, r24
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	22 0f       	add	r18, r18
     434:	33 1f       	adc	r19, r19
     436:	a9 01       	movw	r20, r18
     438:	48 56       	subi	r20, 0x68	; 104
     43a:	5f 4f       	sbci	r21, 0xFF	; 255
     43c:	7a 01       	movw	r14, r20
     43e:	fa 01       	movw	r30, r20
     440:	20 81       	ld	r18, Z
     442:	31 81       	ldd	r19, Z+1	; 0x01
     444:	42 81       	ldd	r20, Z+2	; 0x02
     446:	53 81       	ldd	r21, Z+3	; 0x03
     448:	fc 01       	movw	r30, r24
     44a:	31 96       	adiw	r30, 0x01	; 1
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	e8 56       	subi	r30, 0x68	; 104
     456:	ff 4f       	sbci	r31, 0xFF	; 255
     458:	60 81       	ld	r22, Z
     45a:	71 81       	ldd	r23, Z+1	; 0x01
     45c:	82 81       	ldd	r24, Z+2	; 0x02
     45e:	93 81       	ldd	r25, Z+3	; 0x03
     460:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsi3>
     464:	f7 01       	movw	r30, r14
     466:	60 83       	st	Z, r22
     468:	71 83       	std	Z+1, r23	; 0x01
     46a:	82 83       	std	Z+2, r24	; 0x02
     46c:	93 83       	std	Z+3, r25	; 0x03
							
							flag_op_done=1;
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	99 c0       	rjmp	.+306    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
						}
						else if (j==1&&arr_operators[i]==arr_presedence[j])
     472:	d1 30       	cpi	r29, 0x01	; 1
     474:	81 f5       	brne	.+96     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     476:	41 2f       	mov	r20, r17
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	fa 01       	movw	r30, r20
     47c:	e7 5f       	subi	r30, 0xF7	; 247
     47e:	fe 4f       	sbci	r31, 0xFE	; 254
     480:	30 81       	ld	r19, Z
     482:	ed 2f       	mov	r30, r29
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	e0 5a       	subi	r30, 0xA0	; 160
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	20 81       	ld	r18, Z
     48c:	32 13       	cpse	r19, r18
     48e:	23 c0       	rjmp	.+70     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
						{
							arr_num[i]=arr_num[i]/arr_num[i+1];
     490:	9a 01       	movw	r18, r20
     492:	22 0f       	add	r18, r18
     494:	33 1f       	adc	r19, r19
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	c9 01       	movw	r24, r18
     49c:	88 56       	subi	r24, 0x68	; 104
     49e:	9f 4f       	sbci	r25, 0xFF	; 255
     4a0:	7c 01       	movw	r14, r24
     4a2:	fc 01       	movw	r30, r24
     4a4:	60 81       	ld	r22, Z
     4a6:	71 81       	ldd	r23, Z+1	; 0x01
     4a8:	82 81       	ldd	r24, Z+2	; 0x02
     4aa:	93 81       	ldd	r25, Z+3	; 0x03
     4ac:	fa 01       	movw	r30, r20
     4ae:	31 96       	adiw	r30, 0x01	; 1
     4b0:	ee 0f       	add	r30, r30
     4b2:	ff 1f       	adc	r31, r31
     4b4:	ee 0f       	add	r30, r30
     4b6:	ff 1f       	adc	r31, r31
     4b8:	e8 56       	subi	r30, 0x68	; 104
     4ba:	ff 4f       	sbci	r31, 0xFF	; 255
     4bc:	20 81       	ld	r18, Z
     4be:	31 81       	ldd	r19, Z+1	; 0x01
     4c0:	42 81       	ldd	r20, Z+2	; 0x02
     4c2:	53 81       	ldd	r21, Z+3	; 0x03
     4c4:	0e 94 20 09 	call	0x1240	; 0x1240 <__divmodsi4>
     4c8:	f7 01       	movw	r30, r14
     4ca:	20 83       	st	Z, r18
     4cc:	31 83       	std	Z+1, r19	; 0x01
     4ce:	42 83       	std	Z+2, r20	; 0x02
     4d0:	53 83       	std	Z+3, r21	; 0x03
							flag_op_done=1;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	67 c0       	rjmp	.+206    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
						}
						else if (j==2&&arr_operators[i]==arr_presedence[j])
     4d6:	d2 30       	cpi	r29, 0x02	; 2
     4d8:	81 f5       	brne	.+96     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     4da:	81 2f       	mov	r24, r17
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	fc 01       	movw	r30, r24
     4e0:	e7 5f       	subi	r30, 0xF7	; 247
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	30 81       	ld	r19, Z
     4e6:	ed 2f       	mov	r30, r29
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	e0 5a       	subi	r30, 0xA0	; 160
     4ec:	ff 4f       	sbci	r31, 0xFF	; 255
     4ee:	20 81       	ld	r18, Z
     4f0:	32 13       	cpse	r19, r18
     4f2:	23 c0       	rjmp	.+70     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
						{
							arr_num[i]=arr_num[i]+arr_num[i+1];
     4f4:	dc 01       	movw	r26, r24
     4f6:	aa 0f       	add	r26, r26
     4f8:	bb 1f       	adc	r27, r27
     4fa:	aa 0f       	add	r26, r26
     4fc:	bb 1f       	adc	r27, r27
     4fe:	a8 56       	subi	r26, 0x68	; 104
     500:	bf 4f       	sbci	r27, 0xFF	; 255
     502:	cd 90       	ld	r12, X+
     504:	dd 90       	ld	r13, X+
     506:	ed 90       	ld	r14, X+
     508:	fc 90       	ld	r15, X
     50a:	13 97       	sbiw	r26, 0x03	; 3
     50c:	fc 01       	movw	r30, r24
     50e:	31 96       	adiw	r30, 0x01	; 1
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	e8 56       	subi	r30, 0x68	; 104
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	40 81       	ld	r20, Z
     51e:	51 81       	ldd	r21, Z+1	; 0x01
     520:	62 81       	ldd	r22, Z+2	; 0x02
     522:	73 81       	ldd	r23, Z+3	; 0x03
     524:	4c 0d       	add	r20, r12
     526:	5d 1d       	adc	r21, r13
     528:	6e 1d       	adc	r22, r14
     52a:	7f 1d       	adc	r23, r15
     52c:	4d 93       	st	X+, r20
     52e:	5d 93       	st	X+, r21
     530:	6d 93       	st	X+, r22
     532:	7c 93       	st	X, r23
     534:	13 97       	sbiw	r26, 0x03	; 3
							
							flag_op_done=1;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	35 c0       	rjmp	.+106    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
						}
						else if (j==3&&arr_operators[i]==arr_presedence[j])
     53a:	d3 30       	cpi	r29, 0x03	; 3
     53c:	81 f5       	brne	.+96     	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
     53e:	81 2f       	mov	r24, r17
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	fc 01       	movw	r30, r24
     544:	e7 5f       	subi	r30, 0xF7	; 247
     546:	fe 4f       	sbci	r31, 0xFE	; 254
     548:	30 81       	ld	r19, Z
     54a:	ed 2f       	mov	r30, r29
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	e0 5a       	subi	r30, 0xA0	; 160
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	20 81       	ld	r18, Z
     554:	32 13       	cpse	r19, r18
     556:	25 c0       	rjmp	.+74     	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
						{
							arr_num[i]=arr_num[i]-arr_num[i+1];
     558:	dc 01       	movw	r26, r24
     55a:	aa 0f       	add	r26, r26
     55c:	bb 1f       	adc	r27, r27
     55e:	aa 0f       	add	r26, r26
     560:	bb 1f       	adc	r27, r27
     562:	a8 56       	subi	r26, 0x68	; 104
     564:	bf 4f       	sbci	r27, 0xFF	; 255
     566:	4d 91       	ld	r20, X+
     568:	5d 91       	ld	r21, X+
     56a:	6d 91       	ld	r22, X+
     56c:	7c 91       	ld	r23, X
     56e:	13 97       	sbiw	r26, 0x03	; 3
     570:	fc 01       	movw	r30, r24
     572:	31 96       	adiw	r30, 0x01	; 1
     574:	ee 0f       	add	r30, r30
     576:	ff 1f       	adc	r31, r31
     578:	ee 0f       	add	r30, r30
     57a:	ff 1f       	adc	r31, r31
     57c:	e8 56       	subi	r30, 0x68	; 104
     57e:	ff 4f       	sbci	r31, 0xFF	; 255
     580:	c0 80       	ld	r12, Z
     582:	d1 80       	ldd	r13, Z+1	; 0x01
     584:	e2 80       	ldd	r14, Z+2	; 0x02
     586:	f3 80       	ldd	r15, Z+3	; 0x03
     588:	4c 19       	sub	r20, r12
     58a:	5d 09       	sbc	r21, r13
     58c:	6e 09       	sbc	r22, r14
     58e:	7f 09       	sbc	r23, r15
     590:	4d 93       	st	X+, r20
     592:	5d 93       	st	X+, r21
     594:	6d 93       	st	X+, r22
     596:	7c 93       	st	X, r23
     598:	13 97       	sbiw	r26, 0x03	; 3
							flag_op_done=1;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
				
				for (u8 j=0;j<4;j++)
				{
					for (u8 i=0;i<arr_operatorsIndex;i++)
					{
						u8 flag_op_done=0;
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     5a2:	80 e0       	ldi	r24, 0x00	; 0
						{
							arr_num[i]=arr_num[i]-arr_num[i+1];
							flag_op_done=1;
						}
						
						if (flag_op_done)
     5a4:	88 23       	and	r24, r24
     5a6:	b1 f1       	breq	.+108    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
						{
							
							for(u8 z=i+1;z<num_ArrIndex;z++)
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	21 0f       	add	r18, r17
     5ac:	1a c0       	rjmp	.+52     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
							{
								arr_num[z]=arr_num[z+1];
     5ae:	82 2f       	mov	r24, r18
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	fc 01       	movw	r30, r24
     5b4:	31 96       	adiw	r30, 0x01	; 1
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	e8 56       	subi	r30, 0x68	; 104
     5c0:	ff 4f       	sbci	r31, 0xFF	; 255
     5c2:	40 81       	ld	r20, Z
     5c4:	51 81       	ldd	r21, Z+1	; 0x01
     5c6:	62 81       	ldd	r22, Z+2	; 0x02
     5c8:	73 81       	ldd	r23, Z+3	; 0x03
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	fc 01       	movw	r30, r24
     5d4:	e8 56       	subi	r30, 0x68	; 104
     5d6:	ff 4f       	sbci	r31, 0xFF	; 255
     5d8:	40 83       	st	Z, r20
     5da:	51 83       	std	Z+1, r21	; 0x01
     5dc:	62 83       	std	Z+2, r22	; 0x02
     5de:	73 83       	std	Z+3, r23	; 0x03
						}
						
						if (flag_op_done)
						{
							
							for(u8 z=i+1;z<num_ArrIndex;z++)
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <num_ArrIndex>
     5e6:	23 17       	cp	r18, r19
     5e8:	10 f3       	brcs	.-60     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     5ea:	21 2f       	mov	r18, r17
     5ec:	0b c0       	rjmp	.+22     	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>

								
							}
							for(u8 z=i;z<arr_operatorsIndex;z++)
							{
								arr_operators[z]=arr_operators[z+1];
     5ee:	82 2f       	mov	r24, r18
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	fc 01       	movw	r30, r24
     5f4:	e6 5f       	subi	r30, 0xF6	; 246
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	40 81       	ld	r20, Z
     5fa:	fc 01       	movw	r30, r24
     5fc:	e7 5f       	subi	r30, 0xF7	; 247
     5fe:	fe 4f       	sbci	r31, 0xFE	; 254
     600:	40 83       	st	Z, r20
							{
								arr_num[z]=arr_num[z+1];

								
							}
							for(u8 z=i;z<arr_operatorsIndex;z++)
     602:	2f 5f       	subi	r18, 0xFF	; 255
     604:	2c 17       	cp	r18, r28
     606:	98 f3       	brcs	.-26     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
							{
								arr_operators[z]=arr_operators[z+1];
								
								
							}
							num_ArrIndex--;
     608:	31 50       	subi	r19, 0x01	; 1
     60a:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <num_ArrIndex>
							arr_operatorsIndex--;
     60e:	c1 50       	subi	r28, 0x01	; 1
     610:	c0 93 96 00 	sts	0x0096, r28	; 0x800096 <__data_end>
					
				}
				
				for (u8 j=0;j<4;j++)
				{
					for (u8 i=0;i<arr_operatorsIndex;i++)
     614:	1f 5f       	subi	r17, 0xFF	; 255
     616:	01 c0       	rjmp	.+2      	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__data_end>
     61e:	1c 17       	cp	r17, r28
     620:	08 f4       	brcc	.+2      	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
     622:	f5 ce       	rjmp	.-534    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
					}
					
					
				}
				
				for (u8 j=0;j<4;j++)
     624:	df 5f       	subi	r29, 0xFF	; 255
     626:	d4 30       	cpi	r29, 0x04	; 4
     628:	b8 f3       	brcs	.-18     	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
						
					}
					
					
				}
				res=arr_num[0];
     62a:	c8 e9       	ldi	r28, 0x98	; 152
     62c:	d0 e0       	ldi	r29, 0x00	; 0
     62e:	88 81       	ld	r24, Y
     630:	99 81       	ldd	r25, Y+1	; 0x01
     632:	aa 81       	ldd	r26, Y+2	; 0x02
     634:	bb 81       	ldd	r27, Y+3	; 0x03
     636:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <res>
     63a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <res+0x1>
     63e:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <res+0x2>
     642:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <res+0x3>
				LCD_GoTo(2,0);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	0e 94 86 04 	call	0x90c	; 0x90c <LCD_GoTo>
				LCD_WriteNumber(arr_num[0]);
     64e:	68 81       	ld	r22, Y
     650:	79 81       	ldd	r23, Y+1	; 0x01
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	9b 81       	ldd	r25, Y+3	; 0x03
     656:	0e 94 a5 04 	call	0x94a	; 0x94a <LCD_WriteNumber>
				new_eqn_flag=1;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <new_eqn_flag>
				num_ArrIndex=0;
     660:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <num_ArrIndex>
				arr_operatorsIndex=0;
     664:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end>
     668:	08 c0       	rjmp	.+16     	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
				
				
			}
			else if (k=='C')
     66a:	83 34       	cpi	r24, 0x43	; 67
     66c:	31 f4       	brne	.+12     	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
			{
				LCD_Clear();
     66e:	0e 94 04 05 	call	0xa08	; 0xa08 <LCD_Clear>
				num_ArrIndex=0;
     672:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <num_ArrIndex>
				arr_operatorsIndex=0;
     676:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end>
			}
			
		}
	}
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	cf 90       	pop	r12
     688:	08 95       	ret

0000068a <KEYPAD_Init>:
#include "Utils.h"

extern const u8 KeysArr[ROWS][COLS];

void KEYPAD_Init(void)
{
     68a:	cf 93       	push	r28
	for (u8 r=0;r<ROWS;r++)
     68c:	c0 e0       	ldi	r28, 0x00	; 0
     68e:	06 c0       	rjmp	.+12     	; 0x69c <KEYPAD_Init+0x12>
	{
		DIO_WritePin(FIRST_OUTPUT+r,HIGH);
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	82 e1       	ldi	r24, 0x12	; 18
     694:	8c 0f       	add	r24, r28
     696:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>

extern const u8 KeysArr[ROWS][COLS];

void KEYPAD_Init(void)
{
	for (u8 r=0;r<ROWS;r++)
     69a:	cf 5f       	subi	r28, 0xFF	; 255
     69c:	c4 30       	cpi	r28, 0x04	; 4
     69e:	c0 f3       	brcs	.-16     	; 0x690 <KEYPAD_Init+0x6>
	{
		DIO_WritePin(FIRST_OUTPUT+r,HIGH);
	}
}
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <KEYPAD_GetKey>:

u8 KEYPAD_GetKey(void)
{
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
	u8 f,r,c,key=NO_KEY;
     6b0:	0f 2e       	mov	r0, r31
     6b2:	f4 e5       	ldi	r31, 0x54	; 84
     6b4:	ef 2e       	mov	r14, r31
     6b6:	f0 2d       	mov	r31, r0
	for (r=0;r<ROWS;r++)
     6b8:	10 e0       	ldi	r17, 0x00	; 0
     6ba:	3e c0       	rjmp	.+124    	; 0x738 <KEYPAD_GetKey+0x94>
	{
		DIO_WritePin(FIRST_OUTPUT+r,LOW);
     6bc:	02 e1       	ldi	r16, 0x12	; 18
     6be:	01 0f       	add	r16, r17
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	80 2f       	mov	r24, r16
     6c4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
		f=0;
		
		for(c=0;c<COLS+1;c++)
     6c8:	c0 e0       	ldi	r28, 0x00	; 0
{
	u8 f,r,c,key=NO_KEY;
	for (r=0;r<ROWS;r++)
	{
		DIO_WritePin(FIRST_OUTPUT+r,LOW);
		f=0;
     6ca:	f1 2c       	mov	r15, r1
		
		for(c=0;c<COLS+1;c++)
     6cc:	2e c0       	rjmp	.+92     	; 0x72a <KEYPAD_GetKey+0x86>
		{
			if(c!=1)
     6ce:	c1 30       	cpi	r28, 0x01	; 1
     6d0:	49 f1       	breq	.+82     	; 0x724 <KEYPAD_GetKey+0x80>
			{
				
				if (DIO_ReadPin(FIRST_INPUT+c)==LOW)
     6d2:	db e1       	ldi	r29, 0x1B	; 27
     6d4:	dc 0f       	add	r29, r28
     6d6:	8d 2f       	mov	r24, r29
     6d8:	0e 94 4c 06 	call	0xc98	; 0xc98 <DIO_ReadPin>
     6dc:	81 11       	cpse	r24, r1
     6de:	24 c0       	rjmp	.+72     	; 0x728 <KEYPAD_GetKey+0x84>
				{
					key=KeysArr[r][c-f];
     6e0:	81 2f       	mov	r24, r17
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	2c 2f       	mov	r18, r28
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	2f 19       	sub	r18, r15
     6ea:	31 09       	sbc	r19, r1
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	8b 57       	subi	r24, 0x7B	; 123
     6f6:	9f 4f       	sbci	r25, 0xFF	; 255
     6f8:	fc 01       	movw	r30, r24
     6fa:	e2 0f       	add	r30, r18
     6fc:	f3 1f       	adc	r31, r19
     6fe:	e0 80       	ld	r14, Z
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     700:	8f ed       	ldi	r24, 0xDF	; 223
     702:	9e e2       	ldi	r25, 0x2E	; 46
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <KEYPAD_GetKey+0x60>
     708:	00 c0       	rjmp	.+0      	; 0x70a <KEYPAD_GetKey+0x66>
     70a:	00 00       	nop
					_delay_ms(3);
					while(DIO_ReadPin(FIRST_INPUT+c)==LOW);
     70c:	8d 2f       	mov	r24, r29
     70e:	0e 94 4c 06 	call	0xc98	; 0xc98 <DIO_ReadPin>
     712:	88 23       	and	r24, r24
     714:	d9 f3       	breq	.-10     	; 0x70c <KEYPAD_GetKey+0x68>
     716:	8f ed       	ldi	r24, 0xDF	; 223
     718:	9e e2       	ldi	r25, 0x2E	; 46
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <KEYPAD_GetKey+0x76>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <KEYPAD_GetKey+0x7c>
     720:	00 00       	nop
     722:	02 c0       	rjmp	.+4      	; 0x728 <KEYPAD_GetKey+0x84>
					
				}
			}
			else
			{
				f=1;
     724:	ff 24       	eor	r15, r15
     726:	f3 94       	inc	r15
	for (r=0;r<ROWS;r++)
	{
		DIO_WritePin(FIRST_OUTPUT+r,LOW);
		f=0;
		
		for(c=0;c<COLS+1;c++)
     728:	cf 5f       	subi	r28, 0xFF	; 255
     72a:	c5 30       	cpi	r28, 0x05	; 5
     72c:	80 f2       	brcs	.-96     	; 0x6ce <KEYPAD_GetKey+0x2a>
			else
			{
				f=1;
			}
		}
		DIO_WritePin(FIRST_OUTPUT+r,HIGH);
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	80 2f       	mov	r24, r16
     732:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
}

u8 KEYPAD_GetKey(void)
{
	u8 f,r,c,key=NO_KEY;
	for (r=0;r<ROWS;r++)
     736:	1f 5f       	subi	r17, 0xFF	; 255
     738:	14 30       	cpi	r17, 0x04	; 4
     73a:	08 f4       	brcc	.+2      	; 0x73e <KEYPAD_GetKey+0x9a>
     73c:	bf cf       	rjmp	.-130    	; 0x6bc <KEYPAD_GetKey+0x18>
			}
		}
		DIO_WritePin(FIRST_OUTPUT+r,HIGH);
	}
	return key;
}
     73e:	8e 2d       	mov	r24, r14
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	08 95       	ret

0000074e <WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		WriteData(character[i]);
	}
	WriteIns(0x80);
}
     74e:	cf 93       	push	r28
     750:	c8 2f       	mov	r28, r24
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	83 e0       	ldi	r24, 0x03	; 3
     756:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     75a:	6c 2f       	mov	r22, r28
     75c:	66 1f       	adc	r22, r22
     75e:	66 27       	eor	r22, r22
     760:	66 1f       	adc	r22, r22
     762:	8c e0       	ldi	r24, 0x0C	; 12
     764:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     768:	c6 fb       	bst	r28, 6
     76a:	66 27       	eor	r22, r22
     76c:	60 f9       	bld	r22, 0
     76e:	8a e0       	ldi	r24, 0x0A	; 10
     770:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     774:	c5 fb       	bst	r28, 5
     776:	66 27       	eor	r22, r22
     778:	60 f9       	bld	r22, 0
     77a:	89 e0       	ldi	r24, 0x09	; 9
     77c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     780:	c4 fb       	bst	r28, 4
     782:	66 27       	eor	r22, r22
     784:	60 f9       	bld	r22, 0
     786:	88 e0       	ldi	r24, 0x08	; 8
     788:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     794:	8f e9       	ldi	r24, 0x9F	; 159
     796:	9f e0       	ldi	r25, 0x0F	; 15
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <WriteIns+0x4a>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <WriteIns+0x50>
     79e:	00 00       	nop
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     7a8:	8f e9       	ldi	r24, 0x9F	; 159
     7aa:	9f e0       	ldi	r25, 0x0F	; 15
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <WriteIns+0x5e>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <WriteIns+0x64>
     7b2:	00 00       	nop
     7b4:	c3 fb       	bst	r28, 3
     7b6:	66 27       	eor	r22, r22
     7b8:	60 f9       	bld	r22, 0
     7ba:	8c e0       	ldi	r24, 0x0C	; 12
     7bc:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     7c0:	c2 fb       	bst	r28, 2
     7c2:	66 27       	eor	r22, r22
     7c4:	60 f9       	bld	r22, 0
     7c6:	8a e0       	ldi	r24, 0x0A	; 10
     7c8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     7cc:	c1 fb       	bst	r28, 1
     7ce:	66 27       	eor	r22, r22
     7d0:	60 f9       	bld	r22, 0
     7d2:	89 e0       	ldi	r24, 0x09	; 9
     7d4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     7d8:	6c 2f       	mov	r22, r28
     7da:	61 70       	andi	r22, 0x01	; 1
     7dc:	88 e0       	ldi	r24, 0x08	; 8
     7de:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     7ea:	8f e9       	ldi	r24, 0x9F	; 159
     7ec:	9f e0       	ldi	r25, 0x0F	; 15
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <WriteIns+0xa0>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <WriteIns+0xa6>
     7f4:	00 00       	nop
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     7fe:	8f e9       	ldi	r24, 0x9F	; 159
     800:	9f e0       	ldi	r25, 0x0F	; 15
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     808:	00 00       	nop
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <WriteData>:
     80e:	cf 93       	push	r28
     810:	c8 2f       	mov	r28, r24
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     81a:	6c 2f       	mov	r22, r28
     81c:	66 1f       	adc	r22, r22
     81e:	66 27       	eor	r22, r22
     820:	66 1f       	adc	r22, r22
     822:	8c e0       	ldi	r24, 0x0C	; 12
     824:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     828:	c6 fb       	bst	r28, 6
     82a:	66 27       	eor	r22, r22
     82c:	60 f9       	bld	r22, 0
     82e:	8a e0       	ldi	r24, 0x0A	; 10
     830:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     834:	c5 fb       	bst	r28, 5
     836:	66 27       	eor	r22, r22
     838:	60 f9       	bld	r22, 0
     83a:	89 e0       	ldi	r24, 0x09	; 9
     83c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     840:	c4 fb       	bst	r28, 4
     842:	66 27       	eor	r22, r22
     844:	60 f9       	bld	r22, 0
     846:	88 e0       	ldi	r24, 0x08	; 8
     848:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     854:	8f e9       	ldi	r24, 0x9F	; 159
     856:	9f e0       	ldi	r25, 0x0F	; 15
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <WriteData+0x4a>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <WriteData+0x50>
     85e:	00 00       	nop
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     868:	8f e9       	ldi	r24, 0x9F	; 159
     86a:	9f e0       	ldi	r25, 0x0F	; 15
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <__stack+0xd>
     870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
     872:	00 00       	nop
     874:	c3 fb       	bst	r28, 3
     876:	66 27       	eor	r22, r22
     878:	60 f9       	bld	r22, 0
     87a:	8c e0       	ldi	r24, 0x0C	; 12
     87c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     880:	c2 fb       	bst	r28, 2
     882:	66 27       	eor	r22, r22
     884:	60 f9       	bld	r22, 0
     886:	8a e0       	ldi	r24, 0x0A	; 10
     888:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     88c:	c1 fb       	bst	r28, 1
     88e:	66 27       	eor	r22, r22
     890:	60 f9       	bld	r22, 0
     892:	89 e0       	ldi	r24, 0x09	; 9
     894:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     898:	6c 2f       	mov	r22, r28
     89a:	61 70       	andi	r22, 0x01	; 1
     89c:	88 e0       	ldi	r24, 0x08	; 8
     89e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     8aa:	8f e9       	ldi	r24, 0x9F	; 159
     8ac:	9f e0       	ldi	r25, 0x0F	; 15
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <__stack+0x4f>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <__stack+0x55>
     8b4:	00 00       	nop
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_WritePin>
     8be:	8f e9       	ldi	r24, 0x9F	; 159
     8c0:	9f e0       	ldi	r25, 0x0F	; 15
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <__stack+0x63>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <__stack+0x69>
     8c8:	00 00       	nop
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <LCD_Init>:
     8ce:	2f e7       	ldi	r18, 0x7F	; 127
     8d0:	85 eb       	ldi	r24, 0xB5	; 181
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	21 50       	subi	r18, 0x01	; 1
     8d6:	80 40       	sbci	r24, 0x00	; 0
     8d8:	90 40       	sbci	r25, 0x00	; 0
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <LCD_Init+0x6>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <LCD_Init+0x10>
     8de:	00 00       	nop
     8e0:	82 e0       	ldi	r24, 0x02	; 2
     8e2:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     8e6:	88 e2       	ldi	r24, 0x28	; 40
     8e8:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     8ec:	8c e0       	ldi	r24, 0x0C	; 12
     8ee:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     8f8:	8f e9       	ldi	r24, 0x9F	; 159
     8fa:	9f e0       	ldi	r25, 0x0F	; 15
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <LCD_Init+0x2e>
     900:	00 c0       	rjmp	.+0      	; 0x902 <LCD_Init+0x34>
     902:	00 00       	nop
     904:	86 e0       	ldi	r24, 0x06	; 6
     906:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     90a:	08 95       	ret

0000090c <LCD_GoTo>:
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	29 f4       	brne	.+10     	; 0x91a <LCD_GoTo+0xe>
     910:	80 e8       	ldi	r24, 0x80	; 128
     912:	86 0f       	add	r24, r22
     914:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     918:	08 95       	ret
     91a:	82 30       	cpi	r24, 0x02	; 2
     91c:	29 f4       	brne	.+10     	; 0x928 <LCD_GoTo+0x1c>
     91e:	80 ec       	ldi	r24, 0xC0	; 192
     920:	86 0f       	add	r24, r22
     922:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     926:	08 95       	ret
     928:	83 30       	cpi	r24, 0x03	; 3
     92a:	29 f4       	brne	.+10     	; 0x936 <LCD_GoTo+0x2a>
     92c:	84 e9       	ldi	r24, 0x94	; 148
     92e:	86 0f       	add	r24, r22
     930:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     934:	08 95       	ret
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <LCD_GoTo+0x36>
     93a:	84 ed       	ldi	r24, 0xD4	; 212
     93c:	86 0f       	add	r24, r22
     93e:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     942:	08 95       	ret

00000944 <LCD_WriteChar>:
     944:	0e 94 07 04 	call	0x80e	; 0x80e <WriteData>
     948:	08 95       	ret

0000094a <LCD_WriteNumber>:
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	2a 97       	sbiw	r28, 0x0a	; 10
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	6b 01       	movw	r12, r22
     96a:	7c 01       	movw	r14, r24
     96c:	61 15       	cp	r22, r1
     96e:	71 05       	cpc	r23, r1
     970:	81 05       	cpc	r24, r1
     972:	91 05       	cpc	r25, r1
     974:	21 f4       	brne	.+8      	; 0x97e <LCD_WriteNumber+0x34>
     976:	80 e3       	ldi	r24, 0x30	; 48
     978:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_WriteChar>
     97c:	0d c0       	rjmp	.+26     	; 0x998 <LCD_WriteNumber+0x4e>
     97e:	99 23       	and	r25, r25
     980:	5c f4       	brge	.+22     	; 0x998 <LCD_WriteNumber+0x4e>
     982:	8d e2       	ldi	r24, 0x2D	; 45
     984:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_WriteChar>
     988:	f0 94       	com	r15
     98a:	e0 94       	com	r14
     98c:	d0 94       	com	r13
     98e:	c0 94       	com	r12
     990:	c1 1c       	adc	r12, r1
     992:	d1 1c       	adc	r13, r1
     994:	e1 1c       	adc	r14, r1
     996:	f1 1c       	adc	r15, r1
     998:	10 e0       	ldi	r17, 0x00	; 0
     99a:	15 c0       	rjmp	.+42     	; 0x9c6 <LCD_WriteNumber+0x7c>
     99c:	c7 01       	movw	r24, r14
     99e:	b6 01       	movw	r22, r12
     9a0:	2a e0       	ldi	r18, 0x0A	; 10
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	0e 94 20 09 	call	0x1240	; 0x1240 <__divmodsi4>
     9ac:	e1 e0       	ldi	r30, 0x01	; 1
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	ec 0f       	add	r30, r28
     9b2:	fd 1f       	adc	r31, r29
     9b4:	e1 0f       	add	r30, r17
     9b6:	f1 1d       	adc	r31, r1
     9b8:	60 5d       	subi	r22, 0xD0	; 208
     9ba:	60 83       	st	Z, r22
     9bc:	c2 2e       	mov	r12, r18
     9be:	d3 2e       	mov	r13, r19
     9c0:	e4 2e       	mov	r14, r20
     9c2:	f5 2e       	mov	r15, r21
     9c4:	1f 5f       	subi	r17, 0xFF	; 255
     9c6:	1c 14       	cp	r1, r12
     9c8:	1d 04       	cpc	r1, r13
     9ca:	1e 04       	cpc	r1, r14
     9cc:	1f 04       	cpc	r1, r15
     9ce:	34 f3       	brlt	.-52     	; 0x99c <LCD_WriteNumber+0x52>
     9d0:	11 50       	subi	r17, 0x01	; 1
     9d2:	0a c0       	rjmp	.+20     	; 0x9e8 <LCD_WriteNumber+0x9e>
     9d4:	e1 e0       	ldi	r30, 0x01	; 1
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	ec 0f       	add	r30, r28
     9da:	fd 1f       	adc	r31, r29
     9dc:	e1 0f       	add	r30, r17
     9de:	f1 1d       	adc	r31, r1
     9e0:	80 81       	ld	r24, Z
     9e2:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_WriteChar>
     9e6:	11 50       	subi	r17, 0x01	; 1
     9e8:	1f 3f       	cpi	r17, 0xFF	; 255
     9ea:	a1 f7       	brne	.-24     	; 0x9d4 <LCD_WriteNumber+0x8a>
     9ec:	2a 96       	adiw	r28, 0x0a	; 10
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	08 95       	ret

00000a08 <LCD_Clear>:

void LCD_Clear()
{
	WriteIns(0x01);
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     a0e:	8f e3       	ldi	r24, 0x3F	; 63
     a10:	9f e1       	ldi	r25, 0x1F	; 31
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	f1 f7       	brne	.-4      	; 0xa12 <LCD_Clear+0xa>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <LCD_Clear+0x10>
     a18:	00 00       	nop
	_delay_ms(2);
	WriteIns(0x80);
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	0e 94 a7 03 	call	0x74e	; 0x74e <WriteIns>
     a20:	08 95       	ret

00000a22 <main>:


int main(void)
{
	
	CALC_Init();
     a22:	0e 94 49 00 	call	0x92	; 0x92 <CALC_Init>
	while (1)
	{
		CALC_Runnable();
     a26:	0e 94 83 00 	call	0x106	; 0x106 <CALC_Runnable>
     a2a:	fd cf       	rjmp	.-6      	; 0xa26 <main+0x4>

00000a2c <__vector_16>:
{
	ADC_voidStartConversion(ch);
}

ISR(ADC_vect)
{
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
	if (Adc_Fptr!=NULL_PTR)
     a4e:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <Adc_Fptr>
     a52:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <Adc_Fptr+0x1>
     a56:	30 97       	sbiw	r30, 0x00	; 0
     a58:	09 f0       	breq	.+2      	; 0xa5c <__vector_16+0x30>
	{
		Adc_Fptr();
     a5a:	09 95       	icall
	}
	
}
     a5c:	ff 91       	pop	r31
     a5e:	ef 91       	pop	r30
     a60:	bf 91       	pop	r27
     a62:	af 91       	pop	r26
     a64:	9f 91       	pop	r25
     a66:	8f 91       	pop	r24
     a68:	7f 91       	pop	r23
     a6a:	6f 91       	pop	r22
     a6c:	5f 91       	pop	r21
     a6e:	4f 91       	pop	r20
     a70:	3f 91       	pop	r19
     a72:	2f 91       	pop	r18
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <DIO_InitPin>:
	}
}

void DIO_InitPin(DIO_Pin_type pin ,DIO_PinStatus_type status)
{
	u8 pin_num = pin%8;
     a7e:	98 2f       	mov	r25, r24
     a80:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port =pin/8;
     a82:	86 95       	lsr	r24
     a84:	86 95       	lsr	r24
     a86:	86 95       	lsr	r24
	switch(status)
     a88:	61 30       	cpi	r22, 0x01	; 1
     a8a:	09 f4       	brne	.+2      	; 0xa8e <DIO_InitPin+0x10>
     a8c:	55 c0       	rjmp	.+170    	; 0xb38 <DIO_InitPin+0xba>
     a8e:	20 f0       	brcs	.+8      	; 0xa98 <DIO_InitPin+0x1a>
     a90:	62 30       	cpi	r22, 0x02	; 2
     a92:	09 f4       	brne	.+2      	; 0xa96 <DIO_InitPin+0x18>
     a94:	a1 c0       	rjmp	.+322    	; 0xbd8 <DIO_InitPin+0x15a>
     a96:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	c1 f0       	breq	.+48     	; 0xacc <DIO_InitPin+0x4e>
     a9c:	28 f0       	brcs	.+10     	; 0xaa8 <DIO_InitPin+0x2a>
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	39 f1       	breq	.+78     	; 0xaf0 <DIO_InitPin+0x72>
     aa2:	83 30       	cpi	r24, 0x03	; 3
     aa4:	b9 f1       	breq	.+110    	; 0xb14 <DIO_InitPin+0x96>
     aa6:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA,pin_num);
     aa8:	4a b3       	in	r20, 0x1a	; 26
     aaa:	21 e0       	ldi	r18, 0x01	; 1
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	b9 01       	movw	r22, r18
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_InitPin+0x38>
     ab2:	66 0f       	add	r22, r22
     ab4:	77 1f       	adc	r23, r23
     ab6:	9a 95       	dec	r25
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_InitPin+0x34>
     aba:	cb 01       	movw	r24, r22
     abc:	94 2f       	mov	r25, r20
     abe:	98 2b       	or	r25, r24
     ac0:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
     ac2:	9b b3       	in	r25, 0x1b	; 27
     ac4:	80 95       	com	r24
     ac6:	89 23       	and	r24, r25
     ac8:	8b bb       	out	0x1b, r24	; 27
			break;
     aca:	08 95       	ret
			case PB:
			SET_BIT(DDRB,pin_num);
     acc:	47 b3       	in	r20, 0x17	; 23
     ace:	21 e0       	ldi	r18, 0x01	; 1
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	b9 01       	movw	r22, r18
     ad4:	02 c0       	rjmp	.+4      	; 0xada <DIO_InitPin+0x5c>
     ad6:	66 0f       	add	r22, r22
     ad8:	77 1f       	adc	r23, r23
     ada:	9a 95       	dec	r25
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <DIO_InitPin+0x58>
     ade:	cb 01       	movw	r24, r22
     ae0:	94 2f       	mov	r25, r20
     ae2:	98 2b       	or	r25, r24
     ae4:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
     ae6:	98 b3       	in	r25, 0x18	; 24
     ae8:	80 95       	com	r24
     aea:	89 23       	and	r24, r25
     aec:	88 bb       	out	0x18, r24	; 24
			break;
     aee:	08 95       	ret
			case PC:
			SET_BIT(DDRC,pin_num);
     af0:	44 b3       	in	r20, 0x14	; 20
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	b9 01       	movw	r22, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_InitPin+0x80>
     afa:	66 0f       	add	r22, r22
     afc:	77 1f       	adc	r23, r23
     afe:	9a 95       	dec	r25
     b00:	e2 f7       	brpl	.-8      	; 0xafa <DIO_InitPin+0x7c>
     b02:	cb 01       	movw	r24, r22
     b04:	94 2f       	mov	r25, r20
     b06:	98 2b       	or	r25, r24
     b08:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
     b0a:	95 b3       	in	r25, 0x15	; 21
     b0c:	80 95       	com	r24
     b0e:	89 23       	and	r24, r25
     b10:	85 bb       	out	0x15, r24	; 21
			break;
     b12:	08 95       	ret
			case PD:
			SET_BIT(DDRD,pin_num);
     b14:	41 b3       	in	r20, 0x11	; 17
     b16:	21 e0       	ldi	r18, 0x01	; 1
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	b9 01       	movw	r22, r18
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <DIO_InitPin+0xa4>
     b1e:	66 0f       	add	r22, r22
     b20:	77 1f       	adc	r23, r23
     b22:	9a 95       	dec	r25
     b24:	e2 f7       	brpl	.-8      	; 0xb1e <DIO_InitPin+0xa0>
     b26:	cb 01       	movw	r24, r22
     b28:	94 2f       	mov	r25, r20
     b2a:	98 2b       	or	r25, r24
     b2c:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
     b2e:	92 b3       	in	r25, 0x12	; 18
     b30:	80 95       	com	r24
     b32:	89 23       	and	r24, r25
     b34:	82 bb       	out	0x12, r24	; 18
			break;
     b36:	08 95       	ret
			
		}
		break;
		case INFREE:
		switch(port)
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	c1 f0       	breq	.+48     	; 0xb6c <DIO_InitPin+0xee>
     b3c:	28 f0       	brcs	.+10     	; 0xb48 <DIO_InitPin+0xca>
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	39 f1       	breq	.+78     	; 0xb90 <DIO_InitPin+0x112>
     b42:	83 30       	cpi	r24, 0x03	; 3
     b44:	b9 f1       	breq	.+110    	; 0xbb4 <DIO_InitPin+0x136>
     b46:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
     b48:	4a b3       	in	r20, 0x1a	; 26
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	b9 01       	movw	r22, r18
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <DIO_InitPin+0xd8>
     b52:	66 0f       	add	r22, r22
     b54:	77 1f       	adc	r23, r23
     b56:	9a 95       	dec	r25
     b58:	e2 f7       	brpl	.-8      	; 0xb52 <DIO_InitPin+0xd4>
     b5a:	cb 01       	movw	r24, r22
     b5c:	80 95       	com	r24
     b5e:	94 2f       	mov	r25, r20
     b60:	98 23       	and	r25, r24
     b62:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
     b64:	9b b3       	in	r25, 0x1b	; 27
     b66:	89 23       	and	r24, r25
     b68:	8b bb       	out	0x1b, r24	; 27
			break;
     b6a:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pin_num);
     b6c:	47 b3       	in	r20, 0x17	; 23
     b6e:	21 e0       	ldi	r18, 0x01	; 1
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	b9 01       	movw	r22, r18
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <DIO_InitPin+0xfc>
     b76:	66 0f       	add	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	9a 95       	dec	r25
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <DIO_InitPin+0xf8>
     b7e:	cb 01       	movw	r24, r22
     b80:	80 95       	com	r24
     b82:	94 2f       	mov	r25, r20
     b84:	98 23       	and	r25, r24
     b86:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
     b88:	98 b3       	in	r25, 0x18	; 24
     b8a:	89 23       	and	r24, r25
     b8c:	88 bb       	out	0x18, r24	; 24
			break;
     b8e:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pin_num);
     b90:	44 b3       	in	r20, 0x14	; 20
     b92:	21 e0       	ldi	r18, 0x01	; 1
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	b9 01       	movw	r22, r18
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <DIO_InitPin+0x120>
     b9a:	66 0f       	add	r22, r22
     b9c:	77 1f       	adc	r23, r23
     b9e:	9a 95       	dec	r25
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <DIO_InitPin+0x11c>
     ba2:	cb 01       	movw	r24, r22
     ba4:	80 95       	com	r24
     ba6:	94 2f       	mov	r25, r20
     ba8:	98 23       	and	r25, r24
     baa:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
     bac:	95 b3       	in	r25, 0x15	; 21
     bae:	89 23       	and	r24, r25
     bb0:	85 bb       	out	0x15, r24	; 21
			break;
     bb2:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pin_num);
     bb4:	41 b3       	in	r20, 0x11	; 17
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	b9 01       	movw	r22, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <DIO_InitPin+0x144>
     bbe:	66 0f       	add	r22, r22
     bc0:	77 1f       	adc	r23, r23
     bc2:	9a 95       	dec	r25
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <DIO_InitPin+0x140>
     bc6:	cb 01       	movw	r24, r22
     bc8:	80 95       	com	r24
     bca:	94 2f       	mov	r25, r20
     bcc:	98 23       	and	r25, r24
     bce:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
     bd0:	92 b3       	in	r25, 0x12	; 18
     bd2:	89 23       	and	r24, r25
     bd4:	82 bb       	out	0x12, r24	; 18
			break;
     bd6:	08 95       	ret
			
		}
		break;
		case INPULL:
		switch(port)
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	c1 f0       	breq	.+48     	; 0xc0c <DIO_InitPin+0x18e>
     bdc:	28 f0       	brcs	.+10     	; 0xbe8 <DIO_InitPin+0x16a>
     bde:	82 30       	cpi	r24, 0x02	; 2
     be0:	39 f1       	breq	.+78     	; 0xc30 <DIO_InitPin+0x1b2>
     be2:	83 30       	cpi	r24, 0x03	; 3
     be4:	b9 f1       	breq	.+110    	; 0xc54 <DIO_InitPin+0x1d6>
     be6:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
     be8:	4a b3       	in	r20, 0x1a	; 26
     bea:	21 e0       	ldi	r18, 0x01	; 1
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	b9 01       	movw	r22, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_InitPin+0x178>
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	9a 95       	dec	r25
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_InitPin+0x174>
     bfa:	cb 01       	movw	r24, r22
     bfc:	96 2f       	mov	r25, r22
     bfe:	90 95       	com	r25
     c00:	94 23       	and	r25, r20
     c02:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
     c04:	9b b3       	in	r25, 0x1b	; 27
     c06:	89 2b       	or	r24, r25
     c08:	8b bb       	out	0x1b, r24	; 27
			break;
     c0a:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pin_num);
     c0c:	47 b3       	in	r20, 0x17	; 23
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	b9 01       	movw	r22, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_InitPin+0x19c>
     c16:	66 0f       	add	r22, r22
     c18:	77 1f       	adc	r23, r23
     c1a:	9a 95       	dec	r25
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_InitPin+0x198>
     c1e:	cb 01       	movw	r24, r22
     c20:	96 2f       	mov	r25, r22
     c22:	90 95       	com	r25
     c24:	94 23       	and	r25, r20
     c26:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
     c28:	98 b3       	in	r25, 0x18	; 24
     c2a:	89 2b       	or	r24, r25
     c2c:	88 bb       	out	0x18, r24	; 24
			break;
     c2e:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pin_num);
     c30:	44 b3       	in	r20, 0x14	; 20
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	b9 01       	movw	r22, r18
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <DIO_InitPin+0x1c0>
     c3a:	66 0f       	add	r22, r22
     c3c:	77 1f       	adc	r23, r23
     c3e:	9a 95       	dec	r25
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <DIO_InitPin+0x1bc>
     c42:	cb 01       	movw	r24, r22
     c44:	96 2f       	mov	r25, r22
     c46:	90 95       	com	r25
     c48:	94 23       	and	r25, r20
     c4a:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
     c4c:	95 b3       	in	r25, 0x15	; 21
     c4e:	89 2b       	or	r24, r25
     c50:	85 bb       	out	0x15, r24	; 21
			break;
     c52:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pin_num);
     c54:	41 b3       	in	r20, 0x11	; 17
     c56:	21 e0       	ldi	r18, 0x01	; 1
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	b9 01       	movw	r22, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_InitPin+0x1e4>
     c5e:	66 0f       	add	r22, r22
     c60:	77 1f       	adc	r23, r23
     c62:	9a 95       	dec	r25
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_InitPin+0x1e0>
     c66:	cb 01       	movw	r24, r22
     c68:	96 2f       	mov	r25, r22
     c6a:	90 95       	com	r25
     c6c:	94 23       	and	r25, r20
     c6e:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
     c70:	92 b3       	in	r25, 0x12	; 18
     c72:	89 2b       	or	r24, r25
     c74:	82 bb       	out	0x12, r24	; 18
     c76:	08 95       	ret

00000c78 <DIO_Init>:




void DIO_Init(void)
{
     c78:	cf 93       	push	r28
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
     c7a:	c0 e0       	ldi	r28, 0x00	; 0
     c7c:	09 c0       	rjmp	.+18     	; 0xc90 <DIO_Init+0x18>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
     c7e:	ec 2f       	mov	r30, r28
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	eb 59       	subi	r30, 0x9B	; 155
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	60 81       	ld	r22, Z
     c88:	8c 2f       	mov	r24, r28
     c8a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <DIO_InitPin>


void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
     c8e:	cf 5f       	subi	r28, 0xFF	; 255
     c90:	c0 32       	cpi	r28, 0x20	; 32
     c92:	a8 f3       	brcs	.-22     	; 0xc7e <DIO_Init+0x6>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
}
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <DIO_ReadPin>:
	}
}
DIO_PinVoltage_type DIO_ReadPin (DIO_Pin_type pin)
{
	DIO_PinVoltage_type volt=LOW;
	u8 pin_num =pin%8;
     c98:	28 2f       	mov	r18, r24
     c9a:	27 70       	andi	r18, 0x07	; 7
	DIO_Port_type port =pin/8;
     c9c:	86 95       	lsr	r24
     c9e:	86 95       	lsr	r24
     ca0:	86 95       	lsr	r24
	switch(port)
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	79 f0       	breq	.+30     	; 0xcc4 <DIO_ReadPin+0x2c>
     ca6:	28 f0       	brcs	.+10     	; 0xcb2 <DIO_ReadPin+0x1a>
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	a9 f0       	breq	.+42     	; 0xcd6 <DIO_ReadPin+0x3e>
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	e1 f0       	breq	.+56     	; 0xce8 <DIO_ReadPin+0x50>
     cb0:	24 c0       	rjmp	.+72     	; 0xcfa <DIO_ReadPin+0x62>
	{
		case PA:
		volt=READ_BIT(PINA,pin_num);
     cb2:	89 b3       	in	r24, 0x19	; 25
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_ReadPin+0x24>
     cb8:	95 95       	asr	r25
     cba:	87 95       	ror	r24
     cbc:	2a 95       	dec	r18
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_ReadPin+0x20>
     cc0:	81 70       	andi	r24, 0x01	; 1
		break;
     cc2:	08 95       	ret
		case PB:
		volt=READ_BIT(PINB,pin_num);
     cc4:	86 b3       	in	r24, 0x16	; 22
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <DIO_ReadPin+0x36>
     cca:	95 95       	asr	r25
     ccc:	87 95       	ror	r24
     cce:	2a 95       	dec	r18
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <DIO_ReadPin+0x32>
     cd2:	81 70       	andi	r24, 0x01	; 1
		break;
     cd4:	08 95       	ret
		case PC:
		volt=READ_BIT(PINC,pin_num);
     cd6:	83 b3       	in	r24, 0x13	; 19
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_ReadPin+0x48>
     cdc:	95 95       	asr	r25
     cde:	87 95       	ror	r24
     ce0:	2a 95       	dec	r18
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_ReadPin+0x44>
     ce4:	81 70       	andi	r24, 0x01	; 1
		break;
     ce6:	08 95       	ret
		case PD:
		volt=READ_BIT(PIND,pin_num);
     ce8:	80 b3       	in	r24, 0x10	; 16
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_ReadPin+0x5a>
     cee:	95 95       	asr	r25
     cf0:	87 95       	ror	r24
     cf2:	2a 95       	dec	r18
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_ReadPin+0x56>
     cf6:	81 70       	andi	r24, 0x01	; 1
		break;
     cf8:	08 95       	ret
		
	}
}
DIO_PinVoltage_type DIO_ReadPin (DIO_Pin_type pin)
{
	DIO_PinVoltage_type volt=LOW;
     cfa:	80 e0       	ldi	r24, 0x00	; 0
		volt=READ_BIT(PIND,pin_num);
		break;
		
	}
	return volt;
}
     cfc:	08 95       	ret

00000cfe <DIO_WritePin>:
void DIO_WritePin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
{
	u8 pin_num =pin%8;
     cfe:	98 2f       	mov	r25, r24
     d00:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port =pin/8;
     d02:	86 95       	lsr	r24
     d04:	86 95       	lsr	r24
     d06:	86 95       	lsr	r24
	if (volt==HIGH)
     d08:	61 30       	cpi	r22, 0x01	; 1
     d0a:	e1 f5       	brne	.+120    	; 0xd84 <DIO_WritePin+0x86>
	{
		switch(port)
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	99 f0       	breq	.+38     	; 0xd36 <DIO_WritePin+0x38>
     d10:	28 f0       	brcs	.+10     	; 0xd1c <DIO_WritePin+0x1e>
     d12:	82 30       	cpi	r24, 0x02	; 2
     d14:	e9 f0       	breq	.+58     	; 0xd50 <DIO_WritePin+0x52>
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	41 f1       	breq	.+80     	; 0xd6a <DIO_WritePin+0x6c>
     d1a:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
     d1c:	4b b3       	in	r20, 0x1b	; 27
     d1e:	21 e0       	ldi	r18, 0x01	; 1
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	b9 01       	movw	r22, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_WritePin+0x2c>
     d26:	66 0f       	add	r22, r22
     d28:	77 1f       	adc	r23, r23
     d2a:	9a 95       	dec	r25
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_WritePin+0x28>
     d2e:	cb 01       	movw	r24, r22
     d30:	84 2b       	or	r24, r20
     d32:	8b bb       	out	0x1b, r24	; 27
			break;
     d34:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
     d36:	48 b3       	in	r20, 0x18	; 24
     d38:	21 e0       	ldi	r18, 0x01	; 1
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	b9 01       	movw	r22, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_WritePin+0x46>
     d40:	66 0f       	add	r22, r22
     d42:	77 1f       	adc	r23, r23
     d44:	9a 95       	dec	r25
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_WritePin+0x42>
     d48:	cb 01       	movw	r24, r22
     d4a:	84 2b       	or	r24, r20
     d4c:	88 bb       	out	0x18, r24	; 24
			break;
     d4e:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
     d50:	45 b3       	in	r20, 0x15	; 21
     d52:	21 e0       	ldi	r18, 0x01	; 1
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	b9 01       	movw	r22, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_WritePin+0x60>
     d5a:	66 0f       	add	r22, r22
     d5c:	77 1f       	adc	r23, r23
     d5e:	9a 95       	dec	r25
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <DIO_WritePin+0x5c>
     d62:	cb 01       	movw	r24, r22
     d64:	84 2b       	or	r24, r20
     d66:	85 bb       	out	0x15, r24	; 21
			break;
     d68:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
     d6a:	42 b3       	in	r20, 0x12	; 18
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	b9 01       	movw	r22, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_WritePin+0x7a>
     d74:	66 0f       	add	r22, r22
     d76:	77 1f       	adc	r23, r23
     d78:	9a 95       	dec	r25
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_WritePin+0x76>
     d7c:	cb 01       	movw	r24, r22
     d7e:	84 2b       	or	r24, r20
     d80:	82 bb       	out	0x12, r24	; 18
			break;
     d82:	08 95       	ret
			
		}
	}
	else
	{
		switch(port)
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	a1 f0       	breq	.+40     	; 0xdb0 <DIO_WritePin+0xb2>
     d88:	28 f0       	brcs	.+10     	; 0xd94 <DIO_WritePin+0x96>
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	f9 f0       	breq	.+62     	; 0xdcc <DIO_WritePin+0xce>
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	59 f1       	breq	.+86     	; 0xde8 <DIO_WritePin+0xea>
     d92:	08 95       	ret
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
     d94:	4b b3       	in	r20, 0x1b	; 27
     d96:	21 e0       	ldi	r18, 0x01	; 1
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	b9 01       	movw	r22, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_WritePin+0xa4>
     d9e:	66 0f       	add	r22, r22
     da0:	77 1f       	adc	r23, r23
     da2:	9a 95       	dec	r25
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_WritePin+0xa0>
     da6:	cb 01       	movw	r24, r22
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8b bb       	out	0x1b, r24	; 27
			break;
     dae:	08 95       	ret
			case PB:
			CLR_BIT(PORTB,pin_num);
     db0:	48 b3       	in	r20, 0x18	; 24
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	b9 01       	movw	r22, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_WritePin+0xc0>
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	9a 95       	dec	r25
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_WritePin+0xbc>
     dc2:	cb 01       	movw	r24, r22
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	88 bb       	out	0x18, r24	; 24
			break;
     dca:	08 95       	ret
			case PC:
			CLR_BIT(PORTC,pin_num);
     dcc:	45 b3       	in	r20, 0x15	; 21
     dce:	21 e0       	ldi	r18, 0x01	; 1
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	b9 01       	movw	r22, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_WritePin+0xdc>
     dd6:	66 0f       	add	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	9a 95       	dec	r25
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_WritePin+0xd8>
     dde:	cb 01       	movw	r24, r22
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	85 bb       	out	0x15, r24	; 21
			break;
     de6:	08 95       	ret
			case PD:
			CLR_BIT(PORTD,pin_num);
     de8:	42 b3       	in	r20, 0x12	; 18
     dea:	21 e0       	ldi	r18, 0x01	; 1
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	b9 01       	movw	r22, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_WritePin+0xf8>
     df2:	66 0f       	add	r22, r22
     df4:	77 1f       	adc	r23, r23
     df6:	9a 95       	dec	r25
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_WritePin+0xf4>
     dfa:	cb 01       	movw	r24, r22
     dfc:	80 95       	com	r24
     dfe:	84 23       	and	r24, r20
     e00:	82 bb       	out	0x12, r24	; 18
     e02:	08 95       	ret

00000e04 <__vector_1>:


/*******************************ISR********************************/

ISR(INT0_vect)
{
     e04:	1f 92       	push	r1
     e06:	0f 92       	push	r0
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	0f 92       	push	r0
     e0c:	11 24       	eor	r1, r1
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	4f 93       	push	r20
     e14:	5f 93       	push	r21
     e16:	6f 93       	push	r22
     e18:	7f 93       	push	r23
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
     e1e:	af 93       	push	r26
     e20:	bf 93       	push	r27
     e22:	ef 93       	push	r30
     e24:	ff 93       	push	r31
	if (INT0_Fptr!=NULL_PTR)
     e26:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <INT0_Fptr>
     e2a:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <INT0_Fptr+0x1>
     e2e:	30 97       	sbiw	r30, 0x00	; 0
     e30:	09 f0       	breq	.+2      	; 0xe34 <__vector_1+0x30>
	{
		INT0_Fptr();
     e32:	09 95       	icall
	}
	
}
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	bf 91       	pop	r27
     e3a:	af 91       	pop	r26
     e3c:	9f 91       	pop	r25
     e3e:	8f 91       	pop	r24
     e40:	7f 91       	pop	r23
     e42:	6f 91       	pop	r22
     e44:	5f 91       	pop	r21
     e46:	4f 91       	pop	r20
     e48:	3f 91       	pop	r19
     e4a:	2f 91       	pop	r18
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__vector_2>:
ISR(INT1_vect)
{
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
	
	
	if (INT1_Fptr!=NULL_PTR)
     e78:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <INT1_Fptr>
     e7c:	f0 91 ed 00 	lds	r31, 0x00ED	; 0x8000ed <INT1_Fptr+0x1>
     e80:	30 97       	sbiw	r30, 0x00	; 0
     e82:	09 f0       	breq	.+2      	; 0xe86 <__vector_2+0x30>
	{
		INT1_Fptr();
     e84:	09 95       	icall
	}
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <__vector_3>:
ISR(INT2_vect)
{
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	2f 93       	push	r18
     eb4:	3f 93       	push	r19
     eb6:	4f 93       	push	r20
     eb8:	5f 93       	push	r21
     eba:	6f 93       	push	r22
     ebc:	7f 93       	push	r23
     ebe:	8f 93       	push	r24
     ec0:	9f 93       	push	r25
     ec2:	af 93       	push	r26
     ec4:	bf 93       	push	r27
     ec6:	ef 93       	push	r30
     ec8:	ff 93       	push	r31
	if (INT2_Fptr!=NULL_PTR)
     eca:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <INT2_Fptr>
     ece:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <INT2_Fptr+0x1>
     ed2:	30 97       	sbiw	r30, 0x00	; 0
     ed4:	09 f0       	breq	.+2      	; 0xed8 <__vector_3+0x30>
	{
		INT2_Fptr();
     ed6:	09 95       	icall
	}
	
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_12>:
{
	CLR_BIT(SPCR,SPIE);
}

ISR(SPI_STC_vect)
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
	if (SPI_Fptr!=NULL_PTR)
     f1c:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <SPI_Fptr>
     f20:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <SPI_Fptr+0x1>
     f24:	30 97       	sbiw	r30, 0x00	; 0
     f26:	09 f0       	breq	.+2      	; 0xf2a <__vector_12+0x30>
	{
		SPI_Fptr();
     f28:	09 95       	icall
		
	}
     f2a:	ff 91       	pop	r31
     f2c:	ef 91       	pop	r30
     f2e:	bf 91       	pop	r27
     f30:	af 91       	pop	r26
     f32:	9f 91       	pop	r25
     f34:	8f 91       	pop	r24
     f36:	7f 91       	pop	r23
     f38:	6f 91       	pop	r22
     f3a:	5f 91       	pop	r21
     f3c:	4f 91       	pop	r20
     f3e:	3f 91       	pop	r19
     f40:	2f 91       	pop	r18
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_11>:
/*************************************************************************/

/*************************TIMER0 ISR*************************************/

ISR(TIMER0_OVF_vect)
{
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	2f 93       	push	r18
     f58:	3f 93       	push	r19
     f5a:	4f 93       	push	r20
     f5c:	5f 93       	push	r21
     f5e:	6f 93       	push	r22
     f60:	7f 93       	push	r23
     f62:	8f 93       	push	r24
     f64:	9f 93       	push	r25
     f66:	af 93       	push	r26
     f68:	bf 93       	push	r27
     f6a:	ef 93       	push	r30
     f6c:	ff 93       	push	r31
	if (Timer0_OVF_Fptr!=NULL_PTR)
     f6e:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <Timer0_OVF_Fptr>
     f72:	f0 91 f5 00 	lds	r31, 0x00F5	; 0x8000f5 <Timer0_OVF_Fptr+0x1>
     f76:	30 97       	sbiw	r30, 0x00	; 0
     f78:	09 f0       	breq	.+2      	; 0xf7c <__vector_11+0x30>
	{
		Timer0_OVF_Fptr();
     f7a:	09 95       	icall
	}
}
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <__vector_10>:

ISR(TIMER0_OC_vect)
{
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
	if (Timer0_OC_Fptr!=NULL_PTR)
     fc0:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <Timer0_OC_Fptr>
     fc4:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <Timer0_OC_Fptr+0x1>
     fc8:	30 97       	sbiw	r30, 0x00	; 0
     fca:	09 f0       	breq	.+2      	; 0xfce <__vector_10+0x30>
	{
		Timer0_OC_Fptr();
     fcc:	09 95       	icall
	}
}
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_9>:
/*********************isrs ********************/



ISR(TIMER1_OVF_vect)
{
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	2f 93       	push	r18
     ffc:	3f 93       	push	r19
     ffe:	4f 93       	push	r20
    1000:	5f 93       	push	r21
    1002:	6f 93       	push	r22
    1004:	7f 93       	push	r23
    1006:	8f 93       	push	r24
    1008:	9f 93       	push	r25
    100a:	af 93       	push	r26
    100c:	bf 93       	push	r27
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=NULL_PTR)
    1012:	e0 91 fc 00 	lds	r30, 0x00FC	; 0x8000fc <Timer1_OVF_Fptr>
    1016:	f0 91 fd 00 	lds	r31, 0x00FD	; 0x8000fd <Timer1_OVF_Fptr+0x1>
    101a:	30 97       	sbiw	r30, 0x00	; 0
    101c:	09 f0       	breq	.+2      	; 0x1020 <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
    101e:	09 95       	icall
	}
}
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	7f 91       	pop	r23
    102e:	6f 91       	pop	r22
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	4f 93       	push	r20
    1052:	5f 93       	push	r21
    1054:	6f 93       	push	r22
    1056:	7f 93       	push	r23
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	af 93       	push	r26
    105e:	bf 93       	push	r27
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=NULL_PTR)
    1064:	e0 91 fa 00 	lds	r30, 0x00FA	; 0x8000fa <Timer1_OCA_Fptr>
    1068:	f0 91 fb 00 	lds	r31, 0x00FB	; 0x8000fb <Timer1_OCA_Fptr+0x1>
    106c:	30 97       	sbiw	r30, 0x00	; 0
    106e:	09 f0       	breq	.+2      	; 0x1072 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
    1070:	09 95       	icall
	}

	
}
    1072:	ff 91       	pop	r31
    1074:	ef 91       	pop	r30
    1076:	bf 91       	pop	r27
    1078:	af 91       	pop	r26
    107a:	9f 91       	pop	r25
    107c:	8f 91       	pop	r24
    107e:	7f 91       	pop	r23
    1080:	6f 91       	pop	r22
    1082:	5f 91       	pop	r21
    1084:	4f 91       	pop	r20
    1086:	3f 91       	pop	r19
    1088:	2f 91       	pop	r18
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	0f 90       	pop	r0
    1090:	1f 90       	pop	r1
    1092:	18 95       	reti

00001094 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	2f 93       	push	r18
    10a0:	3f 93       	push	r19
    10a2:	4f 93       	push	r20
    10a4:	5f 93       	push	r21
    10a6:	6f 93       	push	r22
    10a8:	7f 93       	push	r23
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=NULL_PTR)
    10b6:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <Timer1_OCB_Fptr>
    10ba:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <Timer1_OCB_Fptr+0x1>
    10be:	30 97       	sbiw	r30, 0x00	; 0
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
    10c2:	09 95       	icall
	}
}
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULL_PTR)
    1108:	e0 91 f6 00 	lds	r30, 0x00F6	; 0x8000f6 <Timer1_ICU_Fptr>
    110c:	f0 91 f7 00 	lds	r31, 0x00F7	; 0x8000f7 <Timer1_ICU_Fptr+0x1>
    1110:	30 97       	sbiw	r30, 0x00	; 0
    1112:	09 f0       	breq	.+2      	; 0x1116 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
    1114:	09 95       	icall
	}
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	0f 90       	pop	r0
    1134:	1f 90       	pop	r1
    1136:	18 95       	reti

00001138 <__vector_13>:
	UART_TX_Fptr = LocalFptr;
}


ISR(UART_RX_vect)
{
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULL_PTR)
    115a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <UART_RX_Fptr>
    115e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <UART_RX_Fptr+0x1>
    1162:	30 97       	sbiw	r30, 0x00	; 0
    1164:	09 f0       	breq	.+2      	; 0x1168 <__vector_13+0x30>
	{
		UART_RX_Fptr();
    1166:	09 95       	icall
	}
}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	7f 91       	pop	r23
    1176:	6f 91       	pop	r22
    1178:	5f 91       	pop	r21
    117a:	4f 91       	pop	r20
    117c:	3f 91       	pop	r19
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <__vector_15>:

ISR(UART_TX_vect)
{
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULL_PTR)
    11ac:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <UART_TX_Fptr>
    11b0:	f0 91 ff 00 	lds	r31, 0x00FF	; 0x8000ff <UART_TX_Fptr+0x1>
    11b4:	30 97       	sbiw	r30, 0x00	; 0
    11b6:	09 f0       	breq	.+2      	; 0x11ba <__vector_15+0x30>
	{
		UART_TX_Fptr();
    11b8:	09 95       	icall
	}
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	7f 91       	pop	r23
    11c8:	6f 91       	pop	r22
    11ca:	5f 91       	pop	r21
    11cc:	4f 91       	pop	r20
    11ce:	3f 91       	pop	r19
    11d0:	2f 91       	pop	r18
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <__mulsi3>:
    11dc:	db 01       	movw	r26, r22
    11de:	8f 93       	push	r24
    11e0:	9f 93       	push	r25
    11e2:	0e 94 4e 09 	call	0x129c	; 0x129c <__muluhisi3>
    11e6:	bf 91       	pop	r27
    11e8:	af 91       	pop	r26
    11ea:	a2 9f       	mul	r26, r18
    11ec:	80 0d       	add	r24, r0
    11ee:	91 1d       	adc	r25, r1
    11f0:	a3 9f       	mul	r26, r19
    11f2:	90 0d       	add	r25, r0
    11f4:	b2 9f       	mul	r27, r18
    11f6:	90 0d       	add	r25, r0
    11f8:	11 24       	eor	r1, r1
    11fa:	08 95       	ret

000011fc <__udivmodsi4>:
    11fc:	a1 e2       	ldi	r26, 0x21	; 33
    11fe:	1a 2e       	mov	r1, r26
    1200:	aa 1b       	sub	r26, r26
    1202:	bb 1b       	sub	r27, r27
    1204:	fd 01       	movw	r30, r26
    1206:	0d c0       	rjmp	.+26     	; 0x1222 <__udivmodsi4_ep>

00001208 <__udivmodsi4_loop>:
    1208:	aa 1f       	adc	r26, r26
    120a:	bb 1f       	adc	r27, r27
    120c:	ee 1f       	adc	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	a2 17       	cp	r26, r18
    1212:	b3 07       	cpc	r27, r19
    1214:	e4 07       	cpc	r30, r20
    1216:	f5 07       	cpc	r31, r21
    1218:	20 f0       	brcs	.+8      	; 0x1222 <__udivmodsi4_ep>
    121a:	a2 1b       	sub	r26, r18
    121c:	b3 0b       	sbc	r27, r19
    121e:	e4 0b       	sbc	r30, r20
    1220:	f5 0b       	sbc	r31, r21

00001222 <__udivmodsi4_ep>:
    1222:	66 1f       	adc	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	88 1f       	adc	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	1a 94       	dec	r1
    122c:	69 f7       	brne	.-38     	; 0x1208 <__udivmodsi4_loop>
    122e:	60 95       	com	r22
    1230:	70 95       	com	r23
    1232:	80 95       	com	r24
    1234:	90 95       	com	r25
    1236:	9b 01       	movw	r18, r22
    1238:	ac 01       	movw	r20, r24
    123a:	bd 01       	movw	r22, r26
    123c:	cf 01       	movw	r24, r30
    123e:	08 95       	ret

00001240 <__divmodsi4>:
    1240:	05 2e       	mov	r0, r21
    1242:	97 fb       	bst	r25, 7
    1244:	1e f4       	brtc	.+6      	; 0x124c <__divmodsi4+0xc>
    1246:	00 94       	com	r0
    1248:	0e 94 37 09 	call	0x126e	; 0x126e <__negsi2>
    124c:	57 fd       	sbrc	r21, 7
    124e:	07 d0       	rcall	.+14     	; 0x125e <__divmodsi4_neg2>
    1250:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__udivmodsi4>
    1254:	07 fc       	sbrc	r0, 7
    1256:	03 d0       	rcall	.+6      	; 0x125e <__divmodsi4_neg2>
    1258:	4e f4       	brtc	.+18     	; 0x126c <__divmodsi4_exit>
    125a:	0c 94 37 09 	jmp	0x126e	; 0x126e <__negsi2>

0000125e <__divmodsi4_neg2>:
    125e:	50 95       	com	r21
    1260:	40 95       	com	r20
    1262:	30 95       	com	r19
    1264:	21 95       	neg	r18
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	4f 4f       	sbci	r20, 0xFF	; 255
    126a:	5f 4f       	sbci	r21, 0xFF	; 255

0000126c <__divmodsi4_exit>:
    126c:	08 95       	ret

0000126e <__negsi2>:
    126e:	90 95       	com	r25
    1270:	80 95       	com	r24
    1272:	70 95       	com	r23
    1274:	61 95       	neg	r22
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	8f 4f       	sbci	r24, 0xFF	; 255
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	08 95       	ret

0000127e <__umulhisi3>:
    127e:	a2 9f       	mul	r26, r18
    1280:	b0 01       	movw	r22, r0
    1282:	b3 9f       	mul	r27, r19
    1284:	c0 01       	movw	r24, r0
    1286:	a3 9f       	mul	r26, r19
    1288:	70 0d       	add	r23, r0
    128a:	81 1d       	adc	r24, r1
    128c:	11 24       	eor	r1, r1
    128e:	91 1d       	adc	r25, r1
    1290:	b2 9f       	mul	r27, r18
    1292:	70 0d       	add	r23, r0
    1294:	81 1d       	adc	r24, r1
    1296:	11 24       	eor	r1, r1
    1298:	91 1d       	adc	r25, r1
    129a:	08 95       	ret

0000129c <__muluhisi3>:
    129c:	0e 94 3f 09 	call	0x127e	; 0x127e <__umulhisi3>
    12a0:	a5 9f       	mul	r26, r21
    12a2:	90 0d       	add	r25, r0
    12a4:	b4 9f       	mul	r27, r20
    12a6:	90 0d       	add	r25, r0
    12a8:	a4 9f       	mul	r26, r20
    12aa:	80 0d       	add	r24, r0
    12ac:	91 1d       	adc	r25, r1
    12ae:	11 24       	eor	r1, r1
    12b0:	08 95       	ret

000012b2 <_exit>:
    12b2:	f8 94       	cli

000012b4 <__stop_program>:
    12b4:	ff cf       	rjmp	.-2      	; 0x12b4 <__stop_program>
